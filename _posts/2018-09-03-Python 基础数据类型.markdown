---
layout:     post
title:      "Python 基础数据类型"
subtitle:   ""
date:       2018-09-03
author:     "YanSir Park"
header-img: "img/post-bg-js-version.jpg"
tags:
    - Python
---


# Python 基础数据类型


### 数字


### 不同进制的表示

1. 0b 二进制
2. 0o 八进制
3. 0x 十六进制

#### 不同进制的相互转换

括号内没有特殊标注，默认为十进制

```
1. bin(10) 转二进制 
2. int(10) 转十进制
3. hex(10) 转十六进制
4. oct(10) 转八进制
5. int(0b101)
```


#### 整型（int）

定义一个整型的变量

```
>>> a = 1
>>> type(a)
<class 'int'>
```

运算结果的类型

1. 使用整除 ”//“ 时，结果为 int
2. int变量和float 变量运算时，结果为 float

```
>>> type(5//2)
<class 'int'>
>>> type(5/2)
<class 'float'>
>>> a = 1
>>> b = 2
>>> c = 3.0
>>> type(a+b)
<class 'int'>
>>> type(a+c)
<class 'float'>
```

#### 浮点型（float）

浮点型的数据范围

定义一个浮点型变量

```
>>> a = 1.0
>>> type(a)
<class 'float'>
```

浮点数的不确定尾数问题

```
a = 0.1 + 0.3 + 1.3
print(a)
```


#### 布尔型(bool)

1. bool(0) False
2. bool(1) True
3. bool('abc') True
4. bool(' ') False，除了0，空值也可以表示False
5. bool([1,2,3]) True
6. bool(None) False
7. 布尔量属于数字

### 序列

1. 特点是有序，可以使用索引 
2. 包含字符串，列表，元组三个子类型

序列类型的共有操作

```
1. 索引：序列[1]
2. 切片：序列［0:3]，序列[-1: ]，"Hello world"[0:8:2] 
3. 判断元素是否在列表中：3 in [1,2,3]
```

判断序列的长度

```
len('hello')
```

输出序列中的元素

```
a = [1,2,3,4,5,6,7,8]
for i in range(0, len(a),2):
    print(a[i], end = '|')

# 通过切片的方法输出    
a = [1,2,3,4,5,6,7,8]
b = a[0:len(a):2]
print(b)
```

序列操作符

1. x in s
2. x not in s
3. s + t
4. s * n
5. s[i]
6. s[i:j] or s[i:j:k]

5个函数和方法

1. len(s)
2. min(s)
3. max(s)
4. s.index(x),s.index(x,i,j)
5. s.count(x)


#### 字符串（str）

定义一个字符串

```
>>> a = 'this is string'
>>> type(a)
<class 'str'>
```

字符串的切片

1. a[0] 表示字符串 “a” 左数第一个字符
2. a[-1] 表示字符串 “a” 右数第一个字符
3. a[0:6] 表示字符串 "a" 左数第 1-6 个字符
4. a[0:6:2] 表示字符串 "a" 左数第 1-6，步长为 2 的字符
5. a[:] 表示所有的字符
6. a[::-1] 将字符串反向，等价于a[-1::-1]

```
>>> a = 'this is string'
>>> a[0]
't'
>>> a[-1]
'g'
>>> a[0:6]
'this i'
>>> a[0:6:2]
'ti '
>>> a[:]
'this is string'
>>> a[::-1]
'gnirts si siht'
>>> >>> a[2:-1]
'is is strin'
```

字符串的运算

```
>>> a = 'this is string'
>>> a+a
'this is stringthis is string'
>>> a*2
'this is stringthis is string'
```

字符串的处理方法

```
a = "A,B,C".split(",")
b = "anJHnjnJkJWQ".lower()
c = "anJHnjnJkJWQ".upper()
d = "a apple day".count('a')
e = "python".replace('n', 'python.com')
f = "python".center(20, '=')
g = "= python =".strip(" =np")
h = '-'.join("Python")
print(a)
print(b)
print(c)
print(d)
print(e)
print(f)
print(g)
print(h)
```

字符串的处理函数

```
str(x) 转换为字符串形式
len(x) 返回字符串的长度
hex(x) 十六进制
oct(x) 八进制
chr(u) 由 Unicode 转换为单字符
ord(x) 由字符转换为 Unicode 编码 
```


字符串类型的格式化

槽机制

```
a = "{}: 计算机的输出功率位{}W".format('新华社', 10)
print(a)
```

槽的顺序

```
a = "{1}: 计算机的输出功率位{0}W".format('新华社', 10)
print(a)
```

format的格式化输出

1. 槽内部格式化的配置方式{<参数序号>:<格式控制标记>}
2. 完整格式{参数序号:<用于填充的字符><对齐><宽度><数字的千位分隔符,><.精度><类型，整数:b,c,d,o,x,X 浮点数: e,E,f,%>}

```
a = "{0:=^20}".format("Python")
b = "{0:*>20}".format("Python")
c = "{:10}".format("BIT")
print(a)
print(b)
print(c)
```


```
a = "{0:.2f}".format(12345.678)
b = "{0:,.2f}".format(12345.678)
c = "{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(425)
d = "{0:e},{0:E},{0:f},{0:%}".format(3.14)
print(a)
print(b)
print(c)
print(d)
```




#### 列表（list）

定义一个空列表

```
>>> a = []
>>> type(a)
<class 'list'>
```

列表的切片

```
>>> a =['苹果', '西瓜','桃子','火龙果','榴莲']
>>> a[0]
'苹果'
>>> a[-1]
'榴莲'
>>> a[0:2]
['苹果', '西瓜']
>>> a[0:4:2]
['苹果', '桃子']
>>> a[:]
['苹果', '西瓜', '桃子', '火龙果', '榴莲']
>>> a[::-1]
['榴莲', '火龙果', '桃子', '西瓜', '苹果']
```

列表的运算

```
>>> a + a
['苹果', '西瓜', '桃子', '火龙果', '榴莲', '苹果', '西瓜', '桃子', '火龙果', '榴莲']
>>> a * 2
['苹果', '西瓜', '桃子', '火龙果', '榴莲', '苹果', '西瓜', '桃子', '火龙果', '榴莲']
```

列表中元素的修改

```
>>> a =['苹果', '西瓜','桃子','火龙果','榴莲']
>>> a[0] = '橘子'
>>> a
['橘子', '西瓜', '桃子', '火龙果', '榴莲']

>>> a[0:2] = '水果','食物'
>>> a
['水果', '食物', '桃子', '火龙果', '榴莲']

>>> a[0:2] = ['茄子','黄瓜']
>>> a
['茄子', '黄瓜', '桃子', '火龙果', '榴莲']

>>> b = [1,2,3]
>>> b.append(4)
>>> print(b)
[1, 2, 3, 4]
```

列表的嵌套

```
>>> a = [['梨子','苹果'],['西瓜','甜瓜'],['葡萄','哈密瓜']]
>>> a[0]
['梨子', '苹果']
>>> a[0][0]
'梨子'
>>> a[0][0][0]
'梨' 
```

获取最大值和最小值

```
max([1,2,3])
min([1,2,3])
```

列表的函数和方法

1. ls[i] = x
2. ls[i,j,k] = lt
3. del ls[i]
4. del ls[i:j:k]
5. ls += lt
6. ls *= n
7. ls.append(x)
8. ls.clear()
9. ls.copy()
10. ls.insert(i,x)
11. ls.pop(i)
12. ls.remove(x)
13. ls.reverse()

例子

```
ls = ['cat', 'dog', 'tiger', 1024]
ls[1:2] = [1,2,3,4]
print(ls)
del ls[::3]
print(ls)
print(ls*2)
```

```
ls = ['cat', 'dog', 'tiger', 1024]
ls.append(1234)
print(ls)
ls.insert(3, 'human')
print(ls)
ls.reverse()
print(ls)
```


#### 元组（tuple）

定义一个空的元组

```
a = tuple()
print(type(a))
```

定义一个元素的元组

```
a = ('a',)
b = (1,)
print(type(a))
print(type(b))
print(a)
print(b)
```

元组的切片

```
a = (1,'string',['a1','a2','a3'])
print(a[0])
print(a[0:2])
print(a[2][0])
```

元组中元素的修改

1. 元组中的数字、字符等不可修改
2. 元组中列表里的元素可以修改
3. 实质不能修改元组元素所指向的id

```
a = (1,'string',['a1','a2','a3'])
print(a[2][0])
print(id(a[2]))
print(id(a[2][0]))
a[2][0] = 'a4'
print(a[2][0])
print(id(a[2]))
print(id(a[2][0]))
```

元组间的运算

```
(1,2,True)
(1,2,3)+(1,2,True)
(1,2,True)*2
```



### 集合 

#### 集合（set）

集合的特点

1. 无序
2. 没有索引
3. 不能切片

定义一个空的集合

```
a = set()
print(type(a))
```

定义一个元素的集合

```
a = {1,}
print(type(a))
```

集合的操作

```
len({1,2,3})
1 in {1,2,3}
1 not in {1,2,3}
a = {'a','b'}
b = {'b','c'}
print(a & b)
print(a ^ b)
print(a|b)
print(a - b)
```

集合操作符

1. S|T: 并集，返回一个新集合，包括在S和T中所有元素
2. S-T: 差集，返回一个新集合，包括在集合S但不在T中的元素
3. S&T: 交集，返回一个新集合，包括同时在S和T中存在的元素
4. S^T: 补集，返回一个新集合，包括集合S和T中的非相同的元素
5. S<= T 或S < T: 返回True/False, 判断S和T的子集关系
6. S>= T 或 S>T: 返回Trune/False, 判断S和T的包含关系

集合的处理方法

1. S.add(x): 如果x 不在集合S中，将x增加到S
2. S.discard(x): 移除S中元素x, 如果不在，不会报错
3. S.remove(x): 移除S中元素x, 如果x不在集合S中，产生KeyError错误
4. S.clear(): 移除S中所有元素
5. S.pop: 随机返回S的一个元素，更新S,若S为空产生KeyError异常
6. S.copy: 返回集合S的一个副本
7. len(S): 返回集合S的元素个数
8. x in S: 判断S中元素x, x在集合S中，返回True, 否则返回False
9. x not in S: 参考上一条
10. set(x): 将其他类型的x 转变为集合类型

集合的应用场景

包含关系的比较
```
A = 'p' in {'p', 'y', '123'}
B = {'p', 'y'} >= {'p', 'y', '123'}
print(A)
print(B)
```

数据去重(最重要的特点)

```
ls = ['p', 'p', 'y', 'y', 123]
s = set(ls)
print(s)
lt = list(s)
print(lt)

```

集合的运算

```
A = {'p', 'y', 123}
B = set('pypy123')
print(A-B)
print(B-A)
print(A&B)
print(A|B)
print(A^B)
```

集合元素的遍历

```
A = {'p', 'y', 123}
print('`````````')
for item in A:
    print(item, end = ",")
print("\n")
print('`````````')
```

```
A = {'p', 'y', 123}
print("~~~~~~~~~")
try:
    while True:
        print(A.pop(), end = " ")
except:
    pass
print('\n')
print("~~~~~~~~~")
print(A)
```




#### 字典类型 （dict）

1. 数学中的映射
2. 索引和数据
3. 映射类型由用户定义
4. 键值对之间无序
5. 采用大括号{}和dict()进行定义
6. {<键1>:<值1>,<键2>:<值2>,<键3>:<值3>}

定义一个空的字典

```
a = {}
print(type(a))
```

定义一个普通的字典

```
a = {'key1':'value1','key2':'value2'}
print(a)
```

输出字典中的元素

```
a = {'key1':'value1','key2':'value2'}
print(a['key1'])
print(a)
print(a.keys())
print(a.values())
```

字典的特点

1. key 不能重复
2. Key 必须是不可变的类型，比如 int，str，元组，不能为列表
3. 不能索引和切片

字典类型操作函数和方法

1. del d[k]: 删除字典d中键k对应的数据值
2. k in d: 判断键k是否在字典d中，如果在返回True,否则False
3. d.keys(): 返回字典d中所有的键信息
4. d.values():返回字典d中所有的值信息
5. d.items(): 返回字典d中所有的键值对信息
6. d.get(key, default=None)


例子

```
d = {'中国':'北京', '美国':'华盛顿', '法国':'巴黎'}
print('中国' in d)
print(d.keys())
print(d.values())
print(d.get('中国', '东京'))
print(d.get('日本', '东京'))
```



### 常用操作

查看数据类型

```
type(1)
type(1.0)
type('1')
type(('hello'))
type((1))
```

获取集合或序列元素的个数

```
len(set())
```

变量间数值的传递

```
a = 1
b = a
a = 3
print(b)
```

```
a = [1,2,3,4]
id(a)
b = a
a[0] = '1'
print(b)
```

数据类型的可变/不可变

1. int str tuple 值类型，不可变
2. list set dict 引用类型，可变 

查看内存地址

```
id(变量)
```

输出链接地址


```
print(r'c:\north\west')
```

r 或R表示原始字符串

转义字符

```
'let\'s go' 
```

返回 ASCII 编码的序号

```
ord('d')
```

### 应用示例

#### 根据数字返回星期几

```
user_input = eval(input("请输入 1-7 之间的数字："))
raw_str = '星期一星期二星期三星期四星期五星期六星期日'
if user_input in [1,2,3,4,5,6,7]:
    step_date = (user_input - 1) * 3
    out_put = raw_str[step_date:step_date + 3]
    print(out_put)
else:
    print('请检查输入')
```

```
userinput = eval(input('请输入 1-7 之间的数字: '))
out_temp = '一二三四五六日'
if userinput in [1,2,3,4,5,6,7]:
    print('星期' + out_temp[userinput - 1])
else:
    print('请检查输入')
```

#### 输出星座

```
for i in range(12):
    print(chr(9801+i), end = "\n")
```

#### 返回身体质量指数

```
height, weight = eval(input("请输入身高（米）和体重（公斤）[用逗号隔开]: "))
bmi = weight/pow(height,2)
print('BMI指数为：{:.2f}'.format(bmi))
who, nat = '',''
if bmi < 18.5:
    who,nat = '偏瘦', '偏瘦'
elif  18.5 <= bmi < 24:
    who, nat = '正常','正常'
elif 24 <= bmi < 25:
    who, nat = '正常','偏胖'
elif 25<= bmi < 28:
    who, nat = '偏胖', '偏胖'
elif 28 <= bmi < 30:
    who, nat = '偏胖','肥胖'
else:
    who, nat = '肥胖','肥胖'
print('国际标准: '+who+'\n'+'国内标准: '+nat)
```


#### 基本统计值

```
def getNum():
    nums = []
    iNumStr = input('请输入数字(按回车结束)：')
    while iNumStr != '':
        nums.append(eval(iNumStr))
        iNumStr = input('请输入数字(按回车结束)：')
    return nums

def mean(numbers):
    s = 0.0
    for num in numbers:
        s = s + num
    return s/len(numbers)

def dev(numbers, mean):
    sdev = 0.0
    for num in numbers:
        sdev = sdev + (num - mean)**2
    return pow(sdev/(len(numbers)-1), 0.5)

def median(numbers):
    sorted(numbers)
    size = len(numbers)
    if size % 2 == 0:
        med = (numbers[size//2-1]+numbers[size//2+1])/2
    else:
        med = (numbers[size//2])
    return med

def main():
    n = getNum()
    m = mean(n)
    print('平均值:{}, 方差:{}, 中位数:{}.'.format(m, dev(n,m), median(n)))

main()
```