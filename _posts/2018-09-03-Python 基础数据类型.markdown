---
layout:     post
title:      "Basic data type of Python"
subtitle:   ""
date:       2018-09-03
author:     "YanSir"
header-img: "img/post-bg-js-version.jpg"
tags:
    - Python
---


# Python 基础数据类型


### 数字


### 不同进制的表示

1. 0b 二进制
2. 0o 八进制
3. 0x 十六进制

#### 不同进制的相互转换

括号内没有特殊标注，默认为十进制

```
1. bin(10) 转二进制 
2. int(10) 转十进制
3. hex(10) 转十六进制
4. oct(10) 转八进制
5. int(0b101)
```


#### 整型（int）

定义一个整型的变量

```
>>> a = 1
>>> type(a)
<class 'int'>
```

运算结果的类型

1. 使用整除 ”//“ 时，结果为 int
2. int变量和float 变量运算时，结果为 float

```
>>> type(5//2)
<class 'int'>
>>> type(5/2)
<class 'float'>
>>> a = 1
>>> b = 2
>>> c = 3.0
>>> type(a+b)
<class 'int'>
>>> type(a+c)
<class 'float'>
```

#### 浮点型（float）

浮点型的数据范围

定义一个浮点型变量

```
>>> a = 1.0
>>> type(a)
<class 'float'>
```

浮点数的尾数问题

#### 布尔型(bool)

1. bool(0) False
2. bool(1) True
3. bool('abc') True
4. bool(' ') False，除了0，空值也可以表示False
5. bool([1,2,3]) True
6. bool(None) False
7. 布尔量属于数字

### 序列

1. 特点是有序，可以使用索引 
2. 包含字符串，列表，元组三个子类型

序列类型的共有操作

```
1. 索引：序列[1]
2. 切片：序列［0:3]，序列[-1: ]，"Hello world"[0:8:2] 
3. 判断元素是否在列表中：3 in [1,2,3]
```

#### 字符串（str）

定义一个字符串

```
>>> a = 'this is string'
>>> type(a)
<class 'str'>
```

字符串的切片

1. a[0] 表示字符串 “a” 左数第一个字符
2. a[-1] 表示字符串 “a” 右数第一个字符
3. a[0:6] 表示字符串 "a" 左数第 1-6 个字符
4. a[0:6:2] 表示字符串 "a" 左数第 1-6，步长为 2 的字符
5. a[:] 表示所有的字符
6. a[::-1] 将字符串反向，等价于a[-1::-1]

```
>>> a = 'this is string'
>>> a[0]
't'
>>> a[-1]
'g'
>>> a[0:6]
'this i'
>>> a[0:6:2]
'ti '
>>> a[:]
'this is string'
>>> a[::-1]
'gnirts si siht'
>>> >>> a[2:-1]
'is is strin'
```

字符串的运算

```
>>> a = 'this is string'
>>> a+a
'this is stringthis is string'
>>> a*2
'this is stringthis is string'
```


#### 列表（list）

定义一个空列表

```
>>> a = []
>>> type(a)
<class 'list'>
```

列表的切片

```
>>> a =['苹果', '西瓜','桃子','火龙果','榴莲']
>>> a[0]
'苹果'
>>> a[-1]
'榴莲'
>>> a[0:2]
['苹果', '西瓜']
>>> a[0:4:2]
['苹果', '桃子']
>>> a[:]
['苹果', '西瓜', '桃子', '火龙果', '榴莲']
>>> a[::-1]
['榴莲', '火龙果', '桃子', '西瓜', '苹果']
```

列表的运算

```
>>> a + a
['苹果', '西瓜', '桃子', '火龙果', '榴莲', '苹果', '西瓜', '桃子', '火龙果', '榴莲']
>>> a * 2
['苹果', '西瓜', '桃子', '火龙果', '榴莲', '苹果', '西瓜', '桃子', '火龙果', '榴莲']
```

列表中元素的修改

```
>>> a =['苹果', '西瓜','桃子','火龙果','榴莲']
>>> a[0] = '橘子'
>>> a
['橘子', '西瓜', '桃子', '火龙果', '榴莲']

>>> a[0:2] = '水果','食物'
>>> a
['水果', '食物', '桃子', '火龙果', '榴莲']

>>> a[0:2] = ['茄子','黄瓜']
>>> a
['茄子', '黄瓜', '桃子', '火龙果', '榴莲']

>>> b = [1,2,3]
>>> b.append(4)
>>> print(b)
[1, 2, 3, 4]
```

列表的嵌套

```
>>> a = [['梨子','苹果'],['西瓜','甜瓜'],['葡萄','哈密瓜']]
>>> a[0]
['梨子', '苹果']
>>> a[0][0]
'梨子'
>>> a[0][0][0]
'梨' 
```

#### 元组（tuple）

定义一个空的元组

```
a = tuple()
print(type(a))
```

定义一个元素的元组

```
a = ('a',)
b = (1,)
print(type(a))
print(type(b))
print(a)
print(b)
```

元组的切片

```
a = (1,'string',['a1','a2','a3'])
print(a[0])
print(a[0:2])
print(a[2][0])
```

元组中元素的修改

1. 元组中的数字、字符等不可修改
2. 元组中列表里的元素可以修改
3. 实质不能修改元组元素所指向的id

```
a = (1,'string',['a1','a2','a3'])
print(a[2][0])
print(id(a[2]))
print(id(a[2][0]))
a[2][0] = 'a4'
print(a[2][0])
print(id(a[2]))
print(id(a[2][0]))
```

元组间的运算

```
(1,2,True)
(1,2,3)+(1,2,True)
(1,2,True)*2
```



### 集合 

#### 集合（set）

集合的特点

1. 无序
2. 没有索引
3. 不能切片

定义一个空的集合

```
a = set()
print(type(a))
```

定义一个元素的集合

```
a = {1,}
print(type(a))
```

集合的操作

```
len({1,2,3})
1 in {1,2,3}
1 not in {1,2,3}
a = {'a','b'}
b = {'b','c'}
print(a & b)
print(a ^ b)
print(a|b)
print(a - b)
```





#### 字典类型 （dict）

定义一个空的字典

```
a = {}
print(type(a))
```

定义一个普通的字典

```
a = {'key1':'value1','key2':'value2'}
print(a)
```

输出字典中的元素

```
a = {'key1':'value1','key2':'value2'}
print(a['key1'])
print(a)
print(a.keys())
print(a.values())
```

字典的特点

1. key 不能重复
2. Key 必须是不可变的类型，比如 int，str，元组，不能为列表
3. 不能索引和切片



### 常用操作

查看数据类型

```
type(1)
type(1.0)
type('1')
type(('hello'))
type((1))
```

获取集合或序列元素的个数

```
len(set())
```

变量间数值的传递

```
a = 1
b = a
a = 3
print(b)
```

```
a = [1,2,3,4]
id(a)
b = a
a[0] = '1'
print(b)
```

数据类型的可变/不可变

1. int str tuple 值类型，不可变
2. list set dict 引用类型，可变 

查看内存地址

```
id(变量)
```
